/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "frida_core.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  frida_init();
}


SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1shutdown(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  frida_shutdown();
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1manager_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FridaDeviceManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FridaDeviceManager *)frida_device_manager_new();
  *(FridaDeviceManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1manager_1get_1device_1by_1id_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  FridaDeviceManager *arg1 = (FridaDeviceManager *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  gint arg3 ;
  GCancellable *arg4 = (GCancellable *) 0 ;
  GError **arg5 = (GError **) 0 ;
  GError *temp5 ;
  FridaDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg4 = NULL;
  }
  {
    temp5 = NULL;
    arg5 = &temp5;
  }
  arg1 = *(FridaDeviceManager **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (gchar *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (gint)jarg3; 
  result = (FridaDevice *)frida_device_manager_get_device_by_id_sync(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(FridaDevice **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    if (*arg5 != NULL) {
      g_error_free(*arg5);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1manager_1enumerate_1devices_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FridaDeviceManager *arg1 = (FridaDeviceManager *) 0 ;
  GCancellable *arg2 = (GCancellable *) 0 ;
  GError **arg3 = (GError **) 0 ;
  GError *temp3 ;
  FridaDeviceList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg2 = NULL;
  }
  {
    temp3 = NULL;
    arg3 = &temp3;
  }
  arg1 = *(FridaDeviceManager **)&jarg1; 
  result = (FridaDeviceList *)frida_device_manager_enumerate_devices_sync(arg1,arg2,arg3);
  *(FridaDeviceList **)&jresult = result; 
  {
    if (*arg3 != NULL) {
      g_error_free(*arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FridaDeviceList *arg1 = (FridaDeviceList *) 0 ;
  gint result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaDeviceList **)&jarg1; 
  result = (gint)frida_device_list_size(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  FridaDeviceList *arg1 = (FridaDeviceList *) 0 ;
  gint arg2 ;
  FridaDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaDeviceList **)&jarg1; 
  arg2 = (gint)jarg2; 
  result = (FridaDevice *)frida_device_list_get(arg1,arg2);
  *(FridaDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FridaDevice *arg1 = (FridaDevice *) 0 ;
  gchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaDevice **)&jarg1; 
  result = (gchar *)frida_device_get_id(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FridaDevice *arg1 = (FridaDevice *) 0 ;
  gchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaDevice **)&jarg1; 
  result = (gchar *)frida_device_get_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1get_1dtype(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FridaDevice *arg1 = (FridaDevice *) 0 ;
  FridaDeviceType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaDevice **)&jarg1; 
  result = (FridaDeviceType)frida_device_get_dtype(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1unref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gpointer arg1 = (gpointer) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gpointer *)&jarg1; 
  frida_unref(arg1);
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1enumerate_1applications_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  FridaDevice *arg1 = (FridaDevice *) 0 ;
  FridaApplicationQueryOptions *arg2 = (FridaApplicationQueryOptions *) 0 ;
  GCancellable *arg3 = (GCancellable *) 0 ;
  GError **arg4 = (GError **) 0 ;
  GError *temp4 ;
  FridaApplicationList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg3 = NULL;
  }
  {
    temp4 = NULL;
    arg4 = &temp4;
  }
  arg1 = *(FridaDevice **)&jarg1; 
  arg2 = *(FridaApplicationQueryOptions **)&jarg2; 
  result = (FridaApplicationList *)frida_device_enumerate_applications_sync(arg1,arg2,arg3,arg4);
  *(FridaApplicationList **)&jresult = result; 
  {
    if (*arg4 != NULL) {
      g_error_free(*arg4);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FridaApplicationList *arg1 = (FridaApplicationList *) 0 ;
  gint result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationList **)&jarg1; 
  result = (gint)frida_application_list_size(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  FridaApplicationList *arg1 = (FridaApplicationList *) 0 ;
  gint arg2 ;
  FridaApplication *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationList **)&jarg1; 
  arg2 = (gint)jarg2; 
  result = (FridaApplication *)frida_application_list_get(arg1,arg2);
  *(FridaApplication **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1get_1identifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FridaApplication *arg1 = (FridaApplication *) 0 ;
  gchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplication **)&jarg1; 
  result = (gchar *)frida_application_get_identifier(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FridaApplication *arg1 = (FridaApplication *) 0 ;
  gchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplication **)&jarg1; 
  result = (gchar *)frida_application_get_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1get_1pid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FridaApplication *arg1 = (FridaApplication *) 0 ;
  guint result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplication **)&jarg1; 
  result = (guint)frida_application_get_pid(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1get_1parameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FridaApplication *arg1 = (FridaApplication *) 0 ;
  GHashTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplication **)&jarg1; 
  result = (GHashTable *)frida_application_get_parameters(arg1);
  *(GHashTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1new(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FridaApplicationQueryOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FridaApplicationQueryOptions *)frida_application_query_options_new();
  *(FridaApplicationQueryOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1get_1scope(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FridaApplicationQueryOptions *arg1 = (FridaApplicationQueryOptions *) 0 ;
  FridaScope result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationQueryOptions **)&jarg1; 
  result = (FridaScope)frida_application_query_options_get_scope(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1set_1scope(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FridaApplicationQueryOptions *arg1 = (FridaApplicationQueryOptions *) 0 ;
  FridaScope arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationQueryOptions **)&jarg1; 
  arg2 = (FridaScope)jarg2; 
  frida_application_query_options_set_scope(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1select_1identifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  FridaApplicationQueryOptions *arg1 = (FridaApplicationQueryOptions *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationQueryOptions **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (gchar *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  frida_application_query_options_select_identifier(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1has_1selected_1identifiers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FridaApplicationQueryOptions *arg1 = (FridaApplicationQueryOptions *) 0 ;
  gboolean result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationQueryOptions **)&jarg1; 
  result = frida_application_query_options_has_selected_identifiers(arg1);
  *(gboolean **)&jresult = new gboolean(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1application_1query_1options_1enumerate_1selected_1identifiers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  FridaApplicationQueryOptions *arg1 = (FridaApplicationQueryOptions *) 0 ;
  GFunc arg2 ;
  gpointer arg3 = (gpointer) 0 ;
  GFunc *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaApplicationQueryOptions **)&jarg1; 
  argp2 = *(GFunc **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GFunc");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(gpointer *)&jarg3; 
  frida_application_query_options_enumerate_selected_identifiers(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1device_1enumerate_1processes_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  FridaDevice *arg1 = (FridaDevice *) 0 ;
  FridaProcessQueryOptions *arg2 = (FridaProcessQueryOptions *) 0 ;
  GCancellable *arg3 = (GCancellable *) 0 ;
  GError **arg4 = (GError **) 0 ;
  GError *temp4 ;
  FridaProcessList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg3 = NULL;
  }
  {
    temp4 = NULL;
    arg4 = &temp4;
  }
  arg1 = *(FridaDevice **)&jarg1; 
  arg2 = *(FridaProcessQueryOptions **)&jarg2; 
  result = (FridaProcessList *)frida_device_enumerate_processes_sync(arg1,arg2,arg3,arg4);
  *(FridaProcessList **)&jresult = result; 
  {
    if (*arg4 != NULL) {
      g_error_free(*arg4);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1process_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  FridaProcessList *arg1 = (FridaProcessList *) 0 ;
  gint result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaProcessList **)&jarg1; 
  result = (gint)frida_process_list_size(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1process_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  FridaProcessList *arg1 = (FridaProcessList *) 0 ;
  gint arg2 ;
  FridaProcess *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaProcessList **)&jarg1; 
  arg2 = (gint)jarg2; 
  result = (FridaProcess *)frida_process_list_get(arg1,arg2);
  *(FridaProcess **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1process_1get_1pid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  FridaProcess *arg1 = (FridaProcess *) 0 ;
  guint result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaProcess **)&jarg1; 
  result = (guint)frida_process_get_pid(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_dev_supersam_fridaSource_fridaJNI_frida_1process_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FridaProcess *arg1 = (FridaProcess *) 0 ;
  gchar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FridaProcess **)&jarg1; 
  result = (gchar *)frida_process_get_name(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


#ifdef __cplusplus
}
#endif

